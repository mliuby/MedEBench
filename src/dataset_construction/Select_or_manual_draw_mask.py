"""
select_gsa_mask.py

This script is used for interactively selecting the best mask (out of up to 3 candidates)
generated by a model (e.g., GSA) for a given image-editing task. It overlays each mask
on the original image and shows the text prompt for reference.

Controls:
- Press `0`, `1`, or `2` to select the corresponding mask.
- Press `N` to skip the current sample.
- Press `S` to safely stop and exit — progress is saved.

Setup:
- Assumes the following folder structure under `../editing/`:
  - `editing_metadata_rephrase.json` — metadata containing image paths and prompts.
  - `previous/` — original images (previous state).
  - `gsa_masks_previous/` — auto-generated masks (named like `123_0.png`, `123_1.png`, ...).
  - `previous_mask_selected/` — your selected masks will be saved here as `123.png`.

How to run:
    python select_gsa_mask.py

You can re-run the script at any time — it will automatically skip already labeled samples.
"""



import cv2
import numpy as np
import json
import os

base_dir = r"../../"

# === Load metadata ===
with open(os.path.join(base_dir, "editing", "editing_metadata_rephrase.json"), "r") as f:
    data = json.load(f)["samples"]

previous_image_dir = os.path.join(base_dir, "editing", "previous")
gsa_mask_dir = os.path.join(base_dir, "editing", "gsa_masks_previous")
selected_mask_dir = os.path.join(base_dir, "editing", "previous_mask_selected")
os.makedirs(selected_mask_dir, exist_ok=True)

print("Press 0/1/2 to select a mask.")
print("Press N to skip this sample.")
print("Press S to save and safely stop labeling.")

stop_now = False
resize_width = 320  # Resize each image to this width to fit 3 easily

# === Visualization and interaction loop ===
for sample in data:
    img_id = sample["id"]
    mask_save_path = os.path.join(selected_mask_dir, f"{img_id}.png")

    if os.path.exists(mask_save_path):
        continue  # Skip already labeled

    prompt = sample.get("prompt", "")
    prev_img_path = os.path.join(base_dir, sample["previous_image"])
    img_prev = cv2.imread(prev_img_path)
    if img_prev is None:
        print(f"⚠️ Skipping ID {img_id}: Image not found.")
        continue
    img_prev_rgb = cv2.cvtColor(img_prev, cv2.COLOR_BGR2RGB)

    # Load up to 3 masks
    masks = []
    for i in range(3):
        mask_path = os.path.join(gsa_mask_dir, f"{img_id}_{i}.png")
        if os.path.exists(mask_path):
            mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            if mask is not None:
                masks.append((i, mask_path, mask))

    if not masks:
        print(f"No GSA masks found for ID {img_id}.")
        continue

    # Display masks side by side
    vis_list = []
    for idx, _, mask in masks:
        overlay = img_prev_rgb.copy()
        overlay[mask > 0] = [255, 0, 0]
        blended = cv2.addWeighted(img_prev_rgb, 0.5, overlay, 0.5, 0)

        # Resize to consistent width
        scale = resize_width / blended.shape[1]
        blended_resized = cv2.resize(blended, (resize_width, int(blended.shape[0] * scale)))
        vis_list.append(blended_resized)

    combined_display = np.hstack(vis_list)

    # Create a prompt bar with the correct width
    prompt_bar = np.zeros((50, combined_display.shape[1], 3), dtype=np.uint8)
    cv2.putText(prompt_bar, prompt, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

    display_full = np.vstack((prompt_bar, combined_display))

    window_name = "Select Mask (0/1/2), N to skip, S to stop"
    cv2.imshow(window_name, cv2.cvtColor(display_full, cv2.COLOR_RGB2BGR))

    # Wait for user input
    while True:
        key = cv2.waitKey(1) & 0xFF
        if key in [ord('0'), ord('1'), ord('2')]:
            choice = int(chr(key))
            if choice < len(masks):
                selected_idx, selected_path, _ = masks[choice]
                selected_mask = cv2.imread(selected_path, cv2.IMREAD_GRAYSCALE)
                cv2.imwrite(mask_save_path, selected_mask)
                print(f"✅ Saved mask {choice} for ID {img_id}.")
                break
            else:
                print("❌ Invalid choice.")
        elif chr(key).lower() == 'n':
            print(f"⏭️ Skipped ID {img_id}.")
            break
        elif chr(key).lower() == 's':
            stop_now = True
            print("🛑 Safe stop triggered.")
            break

    cv2.destroyAllWindows()
    if stop_now:
        break

print("\n✅ Done! You can safely rerun to continue from where you left off.")
